/******************************/
/********* docReady ***********/
/******************************/

/**
 * docReady function
 *
 * pass a function reference
 * docReady(fn);
 *
 * use an anonymous function
 * docReady(function() { // code here});
 *
 * pass a function reference and a context
 * the context will be passed to the function as the first argument
 * docReady(fn, context);
 *
 * use an anonymous function with a context
 * docReady(function(ctx) {// code here that can use the context argument that was passed to docReady}, context);
 *
 * @param {type} funcName
 * @param {type} baseObj
 * @returns {undefined}
 */
(function (funcName, baseObj) {
	'use strict';
	// The public function name defaults to window.docReady
	// but you can modify the last line of this function to pass in a different object or method name
	// if you want to put them in a different namespace and those will be used instead of
	// window.docReady(...)
	funcName = funcName || 'docReady';
	baseObj = baseObj || window;
	var readyList = [];
	var readyFired = false;
	var readyEventHandlersInstalled = false;

	// call this when the document is ready
	// this function protects itself against being called more than once
	function ready() {
		if (!readyFired) {
			// this must be set to true before we start calling callbacks
			readyFired = true;
			for (var i = 0; i < readyList.length; i++) {
				// if a callback here happens to add new ready handlers,
				// the docReady() function will see that it already fired
				// and will schedule the callback to run right after
				// this event loop finishes so all handlers will still execute
				// in order and no new ones will be added to the readyList
				// while we are processing the list
				readyList[i].fn.call(window, readyList[i].ctx);
			}
			// allow any closures held by these functions to free
			readyList = [];
		}
	}

	function readyStateChange() {
		if (document.readyState === 'complete') {
			ready();
		}
	}

	// This is the one public interface
	// docReady(fn, context);
	// the context argument is optional - if present, it will be passed
	// as an argument to the callback
	baseObj[funcName] = function (callback, context) {
		// if ready has already fired, then just schedule the callback
		// to fire asynchronously, but right away
		if (readyFired) {
			setTimeout(function () {
				callback(context);
			}, 1);
			return;
		} else {
			// add the function and context to the list
			readyList.push({fn: callback, ctx: context});
		}
		// if document already ready to go, schedule the ready function to run
		// IE only safe when readyState is "complete", others safe when readyState is "interactive"
		if (document.readyState === 'complete' || (!document.attachEvent && document.readyState === 'interactive')) {
			setTimeout(ready, 1);
		} else if (!readyEventHandlersInstalled) {
			// otherwise if we don't have event handlers installed, install them
			if (document.addEventListener) {
				// first choice is DOMContentLoaded event
				document.addEventListener('DOMContentLoaded', ready, false);
				// backup is window load event
				window.addEventListener('load', ready, false);
			} else {
				// must be IE
				document.attachEvent('onreadystatechange', readyStateChange);
				window.attachEvent('onload', ready);
			}
			readyEventHandlersInstalled = true;
		}
	};
})('docReady', window);

/********************************************/
/***************** Chatbot SDK ******************/
/********************************************/

var BoxChat = function () {
	var baseURL = '';
	var constants = {
		URL: {
			IFRAME_CHAT: '/chatbox?bid='
		},
		ID: {
			BOT_PLATFORM: 'botplatform_iframe',
			SCRIPT_PLATFORM: 'platform-script'
		},
	};

	var initIframe = function () {
		var src             = document.getElementById('platform-script').getAttribute('src');
		baseURL             = src.replace('/js/apps/chatbox/chatbox.botplatform.js','');
		var bid             = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-bid');
		var username        = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-username');
		var hideTitle       = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-hide-title');
		var dataTheme       = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-theme');
		var dataPhone       = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-phone');
		var dataCustomer       = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-customer');
		let dataCsrfKey = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-csrfKey');
		let dataTokenKey = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-tokenKey');
		let dataUserProfileId = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-userProfileId');
		let dataAppName = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-appName');
		let dataExpireTime = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-expireTime');
		let dataRight = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-right');
		let dataBottom = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-bottom');
		let dataContentCEP = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-contentCEP');
		let intentId = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-intentID');
		let actionOpen = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('data-actionOpen');
		let fullName = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('fullName');
		let staffCode = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('staffCode');
		let token = document.getElementById(constants.ID.SCRIPT_PLATFORM).getAttribute('token');
		var iframeUrl = baseURL + constants.URL.IFRAME_CHAT + bid;
		if(hideTitle){
			iframeUrl += '&hide_title=' + hideTitle;
		}
		if(username){
			iframeUrl += '&user_name=' + username;
		}
		if(dataTheme){
			iframeUrl += '&type_theme=' + dataTheme;
		}
		if(dataPhone){
			iframeUrl += '&phone=' + dataPhone;
		}
		if(dataCustomer){
			iframeUrl += '&customer=' + dataCustomer;
		}
		if(dataCsrfKey){
			iframeUrl += '&csrf_key=' + dataCsrfKey;
		}
		if(dataTokenKey){
			iframeUrl += '&token_key=' + dataTokenKey;
		}
		if(dataUserProfileId){
			iframeUrl += '&user_profile=' + dataUserProfileId;
		}
		if(dataAppName){
			iframeUrl += '&app_name=' + dataAppName;
		}
		if(dataExpireTime){
			iframeUrl += '&expire_time=' + dataExpireTime;
		}
		if(dataRight){
			iframeUrl += '&right=' + dataRight;
		}
		if(dataBottom){
			iframeUrl += '&bottom=' + dataBottom;
		}
		if(dataContentCEP){
			let encodedUrl = encodeURIComponent(dataContentCEP);
			iframeUrl += '&content_cep=' + encodedUrl;
		}
		if(intentId){
			iframeUrl += '&intent_id=' + intentId;
		}
 		if(actionOpen){
			iframeUrl += '&action_open=' + actionOpen;
		 }
		if(token){
			iframeUrl += '&token=' + token;
		}
		if(staffCode){
			iframeUrl += '&staff_code=' + staffCode;
		}
		if(fullName){
			iframeUrl += '&full_name=' + fullName;
		}

		// if(dataTheme) {
		// 	window.location.href = iframeUrl
		// 	return true
		// }
		// add iframe
		var ifrm = document.createElement('iframe');
		ifrm.setAttribute('src', iframeUrl);
		ifrm.setAttribute('title', "Hỗ trợ tự động");
		ifrm.frameborder = 0;
		ifrm.scrolling = 'no';
		if(dataTheme === "viettelpay"){
			ifrm.style = 'right: 30px; left: auto; border: 0px; position: fixed; bottom: 80px; top: auto; z-index: 9999; transition: all 0.3s;height: 100%;width:100%';
		}else if(dataTheme === "web-viettelmoney"){
            const right = dataRight ? dataRight : '0px'
            const bottom = dataBottom ? dataBottom : '0px'
			ifrm.style = `right: ${right}; left: auto; border: 0px; position: fixed; bottom: ${bottom}; top: auto; z-index: 9999; transition: all 0.3s;height: 55px;width:55px`;
		}else {
            ifrm.style = 'right: 0px; left: auto; border: 0px; position: fixed; bottom: 0px; top: auto; z-index: 9999999999; transition: all 0.3s;height: 65px;width:65px';
        }

		ifrm.id = constants.ID.BOT_PLATFORM;
		document.body.appendChild(ifrm);

	};

	var bindEventsForElement = function () {
		window.addEventListener('message', handleEvent, false);
	};

	function handleEvent(e) {
		// console.log(e)
		if(e.data.type != 'chatbot') return;
		var elm = document.getElementById(constants.ID.BOT_PLATFORM);
		elm.style.height = e.data.height;
		elm.style.width = e.data.width;
		if(e.data.hasOwnProperty('bottom')){
			elm.style.bottom = e.data.bottom;
		}
		if(e.data.hasOwnProperty('right')){
			elm.style.right = e.data.right;
		}
	}

	return {
		init : function(){
			initIframe();
			bindEventsForElement();
		}
	};
}();

docReady(function () {
	BoxChat.init();
});